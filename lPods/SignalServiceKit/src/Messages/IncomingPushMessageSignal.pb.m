// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IncomingPushMessageSignal.pb.h"
// @@protoc_insertion_point(imports)

@implementation IncomingPushMessageSignalRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [IncomingPushMessageSignalRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IncomingPushMessageSignal ()
@property IncomingPushMessageSignalType type;
@property (strong) NSString* source;
@property UInt32 sourceDevice;
@property (strong) NSString* relay;
@property UInt64 timestamp;
@property (strong) NSData* message;
@property (strong) NSData* content;
@property UInt64 deliveryTimestamp;
@end

@implementation IncomingPushMessageSignal

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasSource {
  return !!hasSource_;
}
- (void) setHasSource:(BOOL) _value_ {
  hasSource_ = !!_value_;
}
@synthesize source;
- (BOOL) hasSourceDevice {
  return !!hasSourceDevice_;
}
- (void) setHasSourceDevice:(BOOL) _value_ {
  hasSourceDevice_ = !!_value_;
}
@synthesize sourceDevice;
- (BOOL) hasRelay {
  return !!hasRelay_;
}
- (void) setHasRelay:(BOOL) _value_ {
  hasRelay_ = !!_value_;
}
@synthesize relay;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasDeliveryTimestamp {
  return !!hasDeliveryTimestamp_;
}
- (void) setHasDeliveryTimestamp:(BOOL) _value_ {
  hasDeliveryTimestamp_ = !!_value_;
}
@synthesize deliveryTimestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = IncomingPushMessageSignalTypeUnknown;
    self.source = @"";
    self.sourceDevice = 0;
    self.relay = @"";
    self.timestamp = 0L;
    self.message = [NSData data];
    self.content = [NSData data];
    self.deliveryTimestamp = 0L;
  }
  return self;
}
static IncomingPushMessageSignal* defaultIncomingPushMessageSignalInstance = nil;
+ (void) initialize {
  if (self == [IncomingPushMessageSignal class]) {
    defaultIncomingPushMessageSignalInstance = [[IncomingPushMessageSignal alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIncomingPushMessageSignalInstance;
}
- (instancetype) defaultInstance {
  return defaultIncomingPushMessageSignalInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasSource) {
    [output writeString:2 value:self.source];
  }
  if (self.hasRelay) {
    [output writeString:3 value:self.relay];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:5 value:self.timestamp];
  }
  if (self.hasMessage) {
    [output writeData:6 value:self.message];
  }
  if (self.hasSourceDevice) {
    [output writeUInt32:7 value:self.sourceDevice];
  }
  if (self.hasContent) {
    [output writeData:8 value:self.content];
  }
  if (self.hasDeliveryTimestamp) {
    [output writeUInt64:9 value:self.deliveryTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasSource) {
    size_ += computeStringSize(2, self.source);
  }
  if (self.hasRelay) {
    size_ += computeStringSize(3, self.relay);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(5, self.timestamp);
  }
  if (self.hasMessage) {
    size_ += computeDataSize(6, self.message);
  }
  if (self.hasSourceDevice) {
    size_ += computeUInt32Size(7, self.sourceDevice);
  }
  if (self.hasContent) {
    size_ += computeDataSize(8, self.content);
  }
  if (self.hasDeliveryTimestamp) {
    size_ += computeUInt64Size(9, self.deliveryTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IncomingPushMessageSignal*) parseFromData:(NSData*) data {
  return (IncomingPushMessageSignal*)[[[IncomingPushMessageSignal builder] mergeFromData:data] build];
}
+ (IncomingPushMessageSignal*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IncomingPushMessageSignal*)[[[IncomingPushMessageSignal builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IncomingPushMessageSignal*) parseFromInputStream:(NSInputStream*) input {
  return (IncomingPushMessageSignal*)[[[IncomingPushMessageSignal builder] mergeFromInputStream:input] build];
}
+ (IncomingPushMessageSignal*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IncomingPushMessageSignal*)[[[IncomingPushMessageSignal builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IncomingPushMessageSignal*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IncomingPushMessageSignal*)[[[IncomingPushMessageSignal builder] mergeFromCodedInputStream:input] build];
}
+ (IncomingPushMessageSignal*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IncomingPushMessageSignal*)[[[IncomingPushMessageSignal builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IncomingPushMessageSignalBuilder*) builder {
  return [[IncomingPushMessageSignalBuilder alloc] init];
}
+ (IncomingPushMessageSignalBuilder*) builderWithPrototype:(IncomingPushMessageSignal*) prototype {
  return [[IncomingPushMessageSignal builder] mergeFrom:prototype];
}
- (IncomingPushMessageSignalBuilder*) builder {
  return [IncomingPushMessageSignal builder];
}
- (IncomingPushMessageSignalBuilder*) toBuilder {
  return [IncomingPushMessageSignal builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromIncomingPushMessageSignalType(self.type)];
  }
  if (self.hasSource) {
    [output appendFormat:@"%@%@: %@\n", indent, @"source", self.source];
  }
  if (self.hasRelay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"relay", self.relay];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"message", self.message];
  }
  if (self.hasSourceDevice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sourceDevice", [NSNumber numberWithInteger:self.sourceDevice]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasDeliveryTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deliveryTimestamp", [NSNumber numberWithLongLong:self.deliveryTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasSource) {
    [dictionary setObject: self.source forKey: @"source"];
  }
  if (self.hasRelay) {
    [dictionary setObject: self.relay forKey: @"relay"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasMessage) {
    [dictionary setObject: self.message forKey: @"message"];
  }
  if (self.hasSourceDevice) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sourceDevice] forKey: @"sourceDevice"];
  }
  if (self.hasContent) {
    [dictionary setObject: self.content forKey: @"content"];
  }
  if (self.hasDeliveryTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.deliveryTimestamp] forKey: @"deliveryTimestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IncomingPushMessageSignal class]]) {
    return NO;
  }
  IncomingPushMessageSignal *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasSource == otherMessage.hasSource &&
      (!self.hasSource || [self.source isEqual:otherMessage.source]) &&
      self.hasRelay == otherMessage.hasRelay &&
      (!self.hasRelay || [self.relay isEqual:otherMessage.relay]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      self.hasSourceDevice == otherMessage.hasSourceDevice &&
      (!self.hasSourceDevice || self.sourceDevice == otherMessage.sourceDevice) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || [self.content isEqual:otherMessage.content]) &&
      self.hasDeliveryTimestamp == otherMessage.hasDeliveryTimestamp &&
      (!self.hasDeliveryTimestamp || self.deliveryTimestamp == otherMessage.deliveryTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasSource) {
    hashCode = hashCode * 31 + [self.source hash];
  }
  if (self.hasRelay) {
    hashCode = hashCode * 31 + [self.relay hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  if (self.hasSourceDevice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sourceDevice] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [self.content hash];
  }
  if (self.hasDeliveryTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.deliveryTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL IncomingPushMessageSignalTypeIsValidValue(IncomingPushMessageSignalType value) {
  switch (value) {
    case IncomingPushMessageSignalTypeUnknown:
    case IncomingPushMessageSignalTypeCiphertext:
    case IncomingPushMessageSignalTypeKeyExchange:
    case IncomingPushMessageSignalTypePrekeyBundle:
    case IncomingPushMessageSignalTypeReceipt:
    case IncomingPushMessageSignalTypeRead:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromIncomingPushMessageSignalType(IncomingPushMessageSignalType value) {
  switch (value) {
    case IncomingPushMessageSignalTypeUnknown:
      return @"IncomingPushMessageSignalTypeUnknown";
    case IncomingPushMessageSignalTypeCiphertext:
      return @"IncomingPushMessageSignalTypeCiphertext";
    case IncomingPushMessageSignalTypeKeyExchange:
      return @"IncomingPushMessageSignalTypeKeyExchange";
    case IncomingPushMessageSignalTypePrekeyBundle:
      return @"IncomingPushMessageSignalTypePrekeyBundle";
    case IncomingPushMessageSignalTypeReceipt:
      return @"IncomingPushMessageSignalTypeReceipt";
    case IncomingPushMessageSignalTypeRead:
      return @"IncomingPushMessageSignalTypeRead";
    default:
      return nil;
  }
}

@interface IncomingPushMessageSignalBuilder()
@property (strong) IncomingPushMessageSignal* resultIncomingPushMessageSignal;
@end

@implementation IncomingPushMessageSignalBuilder
@synthesize resultIncomingPushMessageSignal;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultIncomingPushMessageSignal = [[IncomingPushMessageSignal alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultIncomingPushMessageSignal;
}
- (IncomingPushMessageSignalBuilder*) clear {
  self.resultIncomingPushMessageSignal = [[IncomingPushMessageSignal alloc] init];
  return self;
}
- (IncomingPushMessageSignalBuilder*) clone {
  return [IncomingPushMessageSignal builderWithPrototype:resultIncomingPushMessageSignal];
}
- (IncomingPushMessageSignal*) defaultInstance {
  return [IncomingPushMessageSignal defaultInstance];
}
- (IncomingPushMessageSignal*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IncomingPushMessageSignal*) buildPartial {
  IncomingPushMessageSignal* returnMe = resultIncomingPushMessageSignal;
  self.resultIncomingPushMessageSignal = nil;
  return returnMe;
}
- (IncomingPushMessageSignalBuilder*) mergeFrom:(IncomingPushMessageSignal*) other {
  if (other == [IncomingPushMessageSignal defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSource) {
    [self setSource:other.source];
  }
  if (other.hasSourceDevice) {
    [self setSourceDevice:other.sourceDevice];
  }
  if (other.hasRelay) {
    [self setRelay:other.relay];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasMessage) {
    [self setMessage:other.message];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasDeliveryTimestamp) {
    [self setDeliveryTimestamp:other.deliveryTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IncomingPushMessageSignalBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IncomingPushMessageSignalBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        IncomingPushMessageSignalType value = (IncomingPushMessageSignalType)[input readEnum];
        if (IncomingPushMessageSignalTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setSource:[input readString]];
        break;
      }
      case 26: {
        [self setRelay:[input readString]];
        break;
      }
      case 40: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
      case 50: {
        [self setMessage:[input readData]];
        break;
      }
      case 56: {
        [self setSourceDevice:[input readUInt32]];
        break;
      }
      case 66: {
        [self setContent:[input readData]];
        break;
      }
      case 72: {
        [self setDeliveryTimestamp:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultIncomingPushMessageSignal.hasType;
}
- (IncomingPushMessageSignalType) type {
  return resultIncomingPushMessageSignal.type;
}
- (IncomingPushMessageSignalBuilder*) setType:(IncomingPushMessageSignalType) value {
  resultIncomingPushMessageSignal.hasType = YES;
  resultIncomingPushMessageSignal.type = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearType {
  resultIncomingPushMessageSignal.hasType = NO;
  resultIncomingPushMessageSignal.type = IncomingPushMessageSignalTypeUnknown;
  return self;
}
- (BOOL) hasSource {
  return resultIncomingPushMessageSignal.hasSource;
}
- (NSString*) source {
  return resultIncomingPushMessageSignal.source;
}
- (IncomingPushMessageSignalBuilder*) setSource:(NSString*) value {
  resultIncomingPushMessageSignal.hasSource = YES;
  resultIncomingPushMessageSignal.source = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearSource {
  resultIncomingPushMessageSignal.hasSource = NO;
  resultIncomingPushMessageSignal.source = @"";
  return self;
}
- (BOOL) hasSourceDevice {
  return resultIncomingPushMessageSignal.hasSourceDevice;
}
- (UInt32) sourceDevice {
  return resultIncomingPushMessageSignal.sourceDevice;
}
- (IncomingPushMessageSignalBuilder*) setSourceDevice:(UInt32) value {
  resultIncomingPushMessageSignal.hasSourceDevice = YES;
  resultIncomingPushMessageSignal.sourceDevice = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearSourceDevice {
  resultIncomingPushMessageSignal.hasSourceDevice = NO;
  resultIncomingPushMessageSignal.sourceDevice = 0;
  return self;
}
- (BOOL) hasRelay {
  return resultIncomingPushMessageSignal.hasRelay;
}
- (NSString*) relay {
  return resultIncomingPushMessageSignal.relay;
}
- (IncomingPushMessageSignalBuilder*) setRelay:(NSString*) value {
  resultIncomingPushMessageSignal.hasRelay = YES;
  resultIncomingPushMessageSignal.relay = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearRelay {
  resultIncomingPushMessageSignal.hasRelay = NO;
  resultIncomingPushMessageSignal.relay = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultIncomingPushMessageSignal.hasTimestamp;
}
- (UInt64) timestamp {
  return resultIncomingPushMessageSignal.timestamp;
}
- (IncomingPushMessageSignalBuilder*) setTimestamp:(UInt64) value {
  resultIncomingPushMessageSignal.hasTimestamp = YES;
  resultIncomingPushMessageSignal.timestamp = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearTimestamp {
  resultIncomingPushMessageSignal.hasTimestamp = NO;
  resultIncomingPushMessageSignal.timestamp = 0L;
  return self;
}
- (BOOL) hasMessage {
  return resultIncomingPushMessageSignal.hasMessage;
}
- (NSData*) message {
  return resultIncomingPushMessageSignal.message;
}
- (IncomingPushMessageSignalBuilder*) setMessage:(NSData*) value {
  resultIncomingPushMessageSignal.hasMessage = YES;
  resultIncomingPushMessageSignal.message = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearMessage {
  resultIncomingPushMessageSignal.hasMessage = NO;
  resultIncomingPushMessageSignal.message = [NSData data];
  return self;
}
- (BOOL) hasContent {
  return resultIncomingPushMessageSignal.hasContent;
}
- (NSData*) content {
  return resultIncomingPushMessageSignal.content;
}
- (IncomingPushMessageSignalBuilder*) setContent:(NSData*) value {
  resultIncomingPushMessageSignal.hasContent = YES;
  resultIncomingPushMessageSignal.content = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearContent {
  resultIncomingPushMessageSignal.hasContent = NO;
  resultIncomingPushMessageSignal.content = [NSData data];
  return self;
}
- (BOOL) hasDeliveryTimestamp {
  return resultIncomingPushMessageSignal.hasDeliveryTimestamp;
}
- (UInt64) deliveryTimestamp {
  return resultIncomingPushMessageSignal.deliveryTimestamp;
}
- (IncomingPushMessageSignalBuilder*) setDeliveryTimestamp:(UInt64) value {
  resultIncomingPushMessageSignal.hasDeliveryTimestamp = YES;
  resultIncomingPushMessageSignal.deliveryTimestamp = value;
  return self;
}
- (IncomingPushMessageSignalBuilder*) clearDeliveryTimestamp {
  resultIncomingPushMessageSignal.hasDeliveryTimestamp = NO;
  resultIncomingPushMessageSignal.deliveryTimestamp = 0L;
  return self;
}
@end

@interface Content ()
@property (strong) PushMessageContent* dataMessage;
@property (strong) SyncMessage* syncMessage;
@end

@implementation Content

- (BOOL) hasDataMessage {
  return !!hasDataMessage_;
}
- (void) setHasDataMessage:(BOOL) _value_ {
  hasDataMessage_ = !!_value_;
}
@synthesize dataMessage;
- (BOOL) hasSyncMessage {
  return !!hasSyncMessage_;
}
- (void) setHasSyncMessage:(BOOL) _value_ {
  hasSyncMessage_ = !!_value_;
}
@synthesize syncMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.dataMessage = [PushMessageContent defaultInstance];
    self.syncMessage = [SyncMessage defaultInstance];
  }
  return self;
}
static Content* defaultContentInstance = nil;
+ (void) initialize {
  if (self == [Content class]) {
    defaultContentInstance = [[Content alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultContentInstance;
}
- (instancetype) defaultInstance {
  return defaultContentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDataMessage) {
    [output writeMessage:1 value:self.dataMessage];
  }
  if (self.hasSyncMessage) {
    [output writeMessage:2 value:self.syncMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDataMessage) {
    size_ += computeMessageSize(1, self.dataMessage);
  }
  if (self.hasSyncMessage) {
    size_ += computeMessageSize(2, self.syncMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Content*) parseFromData:(NSData*) data {
  return (Content*)[[[Content builder] mergeFromData:data] build];
}
+ (Content*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Content*)[[[Content builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Content*) parseFromInputStream:(NSInputStream*) input {
  return (Content*)[[[Content builder] mergeFromInputStream:input] build];
}
+ (Content*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Content*)[[[Content builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Content*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Content*)[[[Content builder] mergeFromCodedInputStream:input] build];
}
+ (Content*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Content*)[[[Content builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ContentBuilder*) builder {
  return [[ContentBuilder alloc] init];
}
+ (ContentBuilder*) builderWithPrototype:(Content*) prototype {
  return [[Content builder] mergeFrom:prototype];
}
- (ContentBuilder*) builder {
  return [Content builder];
}
- (ContentBuilder*) toBuilder {
  return [Content builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDataMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"dataMessage"];
    [self.dataMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSyncMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"syncMessage"];
    [self.syncMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDataMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.dataMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"dataMessage"];
  }
  if (self.hasSyncMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.syncMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"syncMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Content class]]) {
    return NO;
  }
  Content *otherMessage = other;
  return
      self.hasDataMessage == otherMessage.hasDataMessage &&
      (!self.hasDataMessage || [self.dataMessage isEqual:otherMessage.dataMessage]) &&
      self.hasSyncMessage == otherMessage.hasSyncMessage &&
      (!self.hasSyncMessage || [self.syncMessage isEqual:otherMessage.syncMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDataMessage) {
    hashCode = hashCode * 31 + [self.dataMessage hash];
  }
  if (self.hasSyncMessage) {
    hashCode = hashCode * 31 + [self.syncMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ContentBuilder()
@property (strong) Content* resultContent;
@end

@implementation ContentBuilder
@synthesize resultContent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContent = [[Content alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContent;
}
- (ContentBuilder*) clear {
  self.resultContent = [[Content alloc] init];
  return self;
}
- (ContentBuilder*) clone {
  return [Content builderWithPrototype:resultContent];
}
- (Content*) defaultInstance {
  return [Content defaultInstance];
}
- (Content*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Content*) buildPartial {
  Content* returnMe = resultContent;
  self.resultContent = nil;
  return returnMe;
}
- (ContentBuilder*) mergeFrom:(Content*) other {
  if (other == [Content defaultInstance]) {
    return self;
  }
  if (other.hasDataMessage) {
    [self mergeDataMessage:other.dataMessage];
  }
  if (other.hasSyncMessage) {
    [self mergeSyncMessage:other.syncMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PushMessageContentBuilder* subBuilder = [PushMessageContent builder];
        if (self.hasDataMessage) {
          [subBuilder mergeFrom:self.dataMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDataMessage:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        SyncMessageBuilder* subBuilder = [SyncMessage builder];
        if (self.hasSyncMessage) {
          [subBuilder mergeFrom:self.syncMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSyncMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDataMessage {
  return resultContent.hasDataMessage;
}
- (PushMessageContent*) dataMessage {
  return resultContent.dataMessage;
}
- (ContentBuilder*) setDataMessage:(PushMessageContent*) value {
  resultContent.hasDataMessage = YES;
  resultContent.dataMessage = value;
  return self;
}
- (ContentBuilder*) setDataMessageBuilder:(PushMessageContentBuilder*) builderForValue {
  return [self setDataMessage:[builderForValue build]];
}
- (ContentBuilder*) mergeDataMessage:(PushMessageContent*) value {
  if (resultContent.hasDataMessage &&
      resultContent.dataMessage != [PushMessageContent defaultInstance]) {
    resultContent.dataMessage =
      [[[PushMessageContent builderWithPrototype:resultContent.dataMessage] mergeFrom:value] buildPartial];
  } else {
    resultContent.dataMessage = value;
  }
  resultContent.hasDataMessage = YES;
  return self;
}
- (ContentBuilder*) clearDataMessage {
  resultContent.hasDataMessage = NO;
  resultContent.dataMessage = [PushMessageContent defaultInstance];
  return self;
}
- (BOOL) hasSyncMessage {
  return resultContent.hasSyncMessage;
}
- (SyncMessage*) syncMessage {
  return resultContent.syncMessage;
}
- (ContentBuilder*) setSyncMessage:(SyncMessage*) value {
  resultContent.hasSyncMessage = YES;
  resultContent.syncMessage = value;
  return self;
}
- (ContentBuilder*) setSyncMessageBuilder:(SyncMessageBuilder*) builderForValue {
  return [self setSyncMessage:[builderForValue build]];
}
- (ContentBuilder*) mergeSyncMessage:(SyncMessage*) value {
  if (resultContent.hasSyncMessage &&
      resultContent.syncMessage != [SyncMessage defaultInstance]) {
    resultContent.syncMessage =
      [[[SyncMessage builderWithPrototype:resultContent.syncMessage] mergeFrom:value] buildPartial];
  } else {
    resultContent.syncMessage = value;
  }
  resultContent.hasSyncMessage = YES;
  return self;
}
- (ContentBuilder*) clearSyncMessage {
  resultContent.hasSyncMessage = NO;
  resultContent.syncMessage = [SyncMessage defaultInstance];
  return self;
}
@end

@interface PushMessageContent ()
@property (strong) NSString* body;
@property (strong) NSMutableArray<PushMessageContentAttachmentPointer*> * attachmentsArray;
@property (strong) PushMessageContentGroupContext* group;
@property UInt32 flags;
@property (strong) PredefinedAnswers* pa;
@end

@implementation PushMessageContent

- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
@synthesize attachmentsArray;
@dynamic attachments;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) _value_ {
  hasGroup_ = !!_value_;
}
@synthesize group;
- (BOOL) hasFlags {
  return !!hasFlags_;
}
- (void) setHasFlags:(BOOL) _value_ {
  hasFlags_ = !!_value_;
}
@synthesize flags;
- (BOOL) hasPa {
  return !!hasPa_;
}
- (void) setHasPa:(BOOL) _value_ {
  hasPa_ = !!_value_;
}
@synthesize pa;
- (instancetype) init {
  if ((self = [super init])) {
    self.body = @"";
    self.group = [PushMessageContentGroupContext defaultInstance];
    self.flags = 0;
    self.pa = [PredefinedAnswers defaultInstance];
  }
  return self;
}
static PushMessageContent* defaultPushMessageContentInstance = nil;
+ (void) initialize {
  if (self == [PushMessageContent class]) {
    defaultPushMessageContentInstance = [[PushMessageContent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPushMessageContentInstance;
}
- (instancetype) defaultInstance {
  return defaultPushMessageContentInstance;
}
- (NSArray<PushMessageContentAttachmentPointer*> *)attachments {
  return attachmentsArray;
}
- (PushMessageContentAttachmentPointer*)attachmentsAtIndex:(NSUInteger)index {
  return [attachmentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBody) {
    [output writeString:1 value:self.body];
  }
  [self.attachmentsArray enumerateObjectsUsingBlock:^(PushMessageContentAttachmentPointer *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasGroup) {
    [output writeMessage:3 value:self.group];
  }
  if (self.hasFlags) {
    [output writeUInt32:4 value:self.flags];
  }
  if (self.hasPa) {
    [output writeMessage:20 value:self.pa];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBody) {
    size_ += computeStringSize(1, self.body);
  }
  [self.attachmentsArray enumerateObjectsUsingBlock:^(PushMessageContentAttachmentPointer *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasGroup) {
    size_ += computeMessageSize(3, self.group);
  }
  if (self.hasFlags) {
    size_ += computeUInt32Size(4, self.flags);
  }
  if (self.hasPa) {
    size_ += computeMessageSize(20, self.pa);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PushMessageContent*) parseFromData:(NSData*) data {
  return (PushMessageContent*)[[[PushMessageContent builder] mergeFromData:data] build];
}
+ (PushMessageContent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContent*)[[[PushMessageContent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContent*) parseFromInputStream:(NSInputStream*) input {
  return (PushMessageContent*)[[[PushMessageContent builder] mergeFromInputStream:input] build];
}
+ (PushMessageContent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContent*)[[[PushMessageContent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PushMessageContent*)[[[PushMessageContent builder] mergeFromCodedInputStream:input] build];
}
+ (PushMessageContent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContent*)[[[PushMessageContent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentBuilder*) builder {
  return [[PushMessageContentBuilder alloc] init];
}
+ (PushMessageContentBuilder*) builderWithPrototype:(PushMessageContent*) prototype {
  return [[PushMessageContent builder] mergeFrom:prototype];
}
- (PushMessageContentBuilder*) builder {
  return [PushMessageContent builder];
}
- (PushMessageContentBuilder*) toBuilder {
  return [PushMessageContent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  [self.attachmentsArray enumerateObjectsUsingBlock:^(PushMessageContentAttachmentPointer *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"attachments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGroup) {
    [output appendFormat:@"%@%@ {\n", indent, @"group"];
    [self.group writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFlags) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flags", [NSNumber numberWithInteger:self.flags]];
  }
  if (self.hasPa) {
    [output appendFormat:@"%@%@ {\n", indent, @"pa"];
    [self.pa writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  for (PushMessageContentAttachmentPointer* element in self.attachmentsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"attachments"];
  }
  if (self.hasGroup) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.group storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"group"];
  }
  if (self.hasFlags) {
    [dictionary setObject: [NSNumber numberWithInteger:self.flags] forKey: @"flags"];
  }
  if (self.hasPa) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pa storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pa"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PushMessageContent class]]) {
    return NO;
  }
  PushMessageContent *otherMessage = other;
  return
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      [self.attachmentsArray isEqualToArray:otherMessage.attachmentsArray] &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasFlags == otherMessage.hasFlags &&
      (!self.hasFlags || self.flags == otherMessage.flags) &&
      self.hasPa == otherMessage.hasPa &&
      (!self.hasPa || [self.pa isEqual:otherMessage.pa]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  [self.attachmentsArray enumerateObjectsUsingBlock:^(PushMessageContentAttachmentPointer *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasFlags) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.flags] hash];
  }
  if (self.hasPa) {
    hashCode = hashCode * 31 + [self.pa hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PushMessageContentFlagsIsValidValue(PushMessageContentFlags value) {
  switch (value) {
    case PushMessageContentFlagsEndSession:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPushMessageContentFlags(PushMessageContentFlags value) {
  switch (value) {
    case PushMessageContentFlagsEndSession:
      return @"PushMessageContentFlagsEndSession";
    default:
      return nil;
  }
}

@interface PushMessageContentAttachmentPointer ()
@property UInt64 id;
@property (strong) NSString* contentType;
@property (strong) NSData* key;
@property UInt32 size;
@property (strong) NSData* thumbnail;
@property (strong) NSData* digest;
@end

@implementation PushMessageContentAttachmentPointer

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasContentType {
  return !!hasContentType_;
}
- (void) setHasContentType:(BOOL) _value_ {
  hasContentType_ = !!_value_;
}
@synthesize contentType;
- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasSize {
  return !!hasSize_;
}
- (void) setHasSize:(BOOL) _value_ {
  hasSize_ = !!_value_;
}
@synthesize size;
- (BOOL) hasThumbnail {
  return !!hasThumbnail_;
}
- (void) setHasThumbnail:(BOOL) _value_ {
  hasThumbnail_ = !!_value_;
}
@synthesize thumbnail;
- (BOOL) hasDigest {
  return !!hasDigest_;
}
- (void) setHasDigest:(BOOL) _value_ {
  hasDigest_ = !!_value_;
}
@synthesize digest;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.contentType = @"";
    self.key = [NSData data];
    self.size = 0;
    self.thumbnail = [NSData data];
    self.digest = [NSData data];
  }
  return self;
}
static PushMessageContentAttachmentPointer* defaultPushMessageContentAttachmentPointerInstance = nil;
+ (void) initialize {
  if (self == [PushMessageContentAttachmentPointer class]) {
    defaultPushMessageContentAttachmentPointerInstance = [[PushMessageContentAttachmentPointer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPushMessageContentAttachmentPointerInstance;
}
- (instancetype) defaultInstance {
  return defaultPushMessageContentAttachmentPointerInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeFixed64:1 value:self.id];
  }
  if (self.hasContentType) {
    [output writeString:2 value:self.contentType];
  }
  if (self.hasKey) {
    [output writeData:3 value:self.key];
  }
  if (self.hasSize) {
    [output writeUInt32:4 value:self.size];
  }
  if (self.hasThumbnail) {
    [output writeData:5 value:self.thumbnail];
  }
  if (self.hasDigest) {
    [output writeData:6 value:self.digest];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeFixed64Size(1, self.id);
  }
  if (self.hasContentType) {
    size_ += computeStringSize(2, self.contentType);
  }
  if (self.hasKey) {
    size_ += computeDataSize(3, self.key);
  }
  if (self.hasSize) {
    size_ += computeUInt32Size(4, self.size);
  }
  if (self.hasThumbnail) {
    size_ += computeDataSize(5, self.thumbnail);
  }
  if (self.hasDigest) {
    size_ += computeDataSize(6, self.digest);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PushMessageContentAttachmentPointer*) parseFromData:(NSData*) data {
  return (PushMessageContentAttachmentPointer*)[[[PushMessageContentAttachmentPointer builder] mergeFromData:data] build];
}
+ (PushMessageContentAttachmentPointer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContentAttachmentPointer*)[[[PushMessageContentAttachmentPointer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentAttachmentPointer*) parseFromInputStream:(NSInputStream*) input {
  return (PushMessageContentAttachmentPointer*)[[[PushMessageContentAttachmentPointer builder] mergeFromInputStream:input] build];
}
+ (PushMessageContentAttachmentPointer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContentAttachmentPointer*)[[[PushMessageContentAttachmentPointer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentAttachmentPointer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PushMessageContentAttachmentPointer*)[[[PushMessageContentAttachmentPointer builder] mergeFromCodedInputStream:input] build];
}
+ (PushMessageContentAttachmentPointer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContentAttachmentPointer*)[[[PushMessageContentAttachmentPointer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentAttachmentPointerBuilder*) builder {
  return [[PushMessageContentAttachmentPointerBuilder alloc] init];
}
+ (PushMessageContentAttachmentPointerBuilder*) builderWithPrototype:(PushMessageContentAttachmentPointer*) prototype {
  return [[PushMessageContentAttachmentPointer builder] mergeFrom:prototype];
}
- (PushMessageContentAttachmentPointerBuilder*) builder {
  return [PushMessageContentAttachmentPointer builder];
}
- (PushMessageContentAttachmentPointerBuilder*) toBuilder {
  return [PushMessageContentAttachmentPointer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasContentType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contentType", self.contentType];
  }
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasSize) {
    [output appendFormat:@"%@%@: %@\n", indent, @"size", [NSNumber numberWithInteger:self.size]];
  }
  if (self.hasThumbnail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"thumbnail", self.thumbnail];
  }
  if (self.hasDigest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"digest", self.digest];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasContentType) {
    [dictionary setObject: self.contentType forKey: @"contentType"];
  }
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasSize) {
    [dictionary setObject: [NSNumber numberWithInteger:self.size] forKey: @"size"];
  }
  if (self.hasThumbnail) {
    [dictionary setObject: self.thumbnail forKey: @"thumbnail"];
  }
  if (self.hasDigest) {
    [dictionary setObject: self.digest forKey: @"digest"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PushMessageContentAttachmentPointer class]]) {
    return NO;
  }
  PushMessageContentAttachmentPointer *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasContentType == otherMessage.hasContentType &&
      (!self.hasContentType || [self.contentType isEqual:otherMessage.contentType]) &&
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasSize == otherMessage.hasSize &&
      (!self.hasSize || self.size == otherMessage.size) &&
      self.hasThumbnail == otherMessage.hasThumbnail &&
      (!self.hasThumbnail || [self.thumbnail isEqual:otherMessage.thumbnail]) &&
      self.hasDigest == otherMessage.hasDigest &&
      (!self.hasDigest || [self.digest isEqual:otherMessage.digest]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasContentType) {
    hashCode = hashCode * 31 + [self.contentType hash];
  }
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasSize) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.size] hash];
  }
  if (self.hasThumbnail) {
    hashCode = hashCode * 31 + [self.thumbnail hash];
  }
  if (self.hasDigest) {
    hashCode = hashCode * 31 + [self.digest hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PushMessageContentAttachmentPointerBuilder()
@property (strong) PushMessageContentAttachmentPointer* resultAttachmentPointer;
@end

@implementation PushMessageContentAttachmentPointerBuilder
@synthesize resultAttachmentPointer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAttachmentPointer = [[PushMessageContentAttachmentPointer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAttachmentPointer;
}
- (PushMessageContentAttachmentPointerBuilder*) clear {
  self.resultAttachmentPointer = [[PushMessageContentAttachmentPointer alloc] init];
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clone {
  return [PushMessageContentAttachmentPointer builderWithPrototype:resultAttachmentPointer];
}
- (PushMessageContentAttachmentPointer*) defaultInstance {
  return [PushMessageContentAttachmentPointer defaultInstance];
}
- (PushMessageContentAttachmentPointer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PushMessageContentAttachmentPointer*) buildPartial {
  PushMessageContentAttachmentPointer* returnMe = resultAttachmentPointer;
  self.resultAttachmentPointer = nil;
  return returnMe;
}
- (PushMessageContentAttachmentPointerBuilder*) mergeFrom:(PushMessageContentAttachmentPointer*) other {
  if (other == [PushMessageContentAttachmentPointer defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasContentType) {
    [self setContentType:other.contentType];
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasSize) {
    [self setSize:other.size];
  }
  if (other.hasThumbnail) {
    [self setThumbnail:other.thumbnail];
  }
  if (other.hasDigest) {
    [self setDigest:other.digest];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PushMessageContentAttachmentPointerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setId:[input readFixed64]];
        break;
      }
      case 18: {
        [self setContentType:[input readString]];
        break;
      }
      case 26: {
        [self setKey:[input readData]];
        break;
      }
      case 32: {
        [self setSize:[input readUInt32]];
        break;
      }
      case 42: {
        [self setThumbnail:[input readData]];
        break;
      }
      case 50: {
        [self setDigest:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultAttachmentPointer.hasId;
}
- (UInt64) id {
  return resultAttachmentPointer.id;
}
- (PushMessageContentAttachmentPointerBuilder*) setId:(UInt64) value {
  resultAttachmentPointer.hasId = YES;
  resultAttachmentPointer.id = value;
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clearId {
  resultAttachmentPointer.hasId = NO;
  resultAttachmentPointer.id = 0L;
  return self;
}
- (BOOL) hasContentType {
  return resultAttachmentPointer.hasContentType;
}
- (NSString*) contentType {
  return resultAttachmentPointer.contentType;
}
- (PushMessageContentAttachmentPointerBuilder*) setContentType:(NSString*) value {
  resultAttachmentPointer.hasContentType = YES;
  resultAttachmentPointer.contentType = value;
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clearContentType {
  resultAttachmentPointer.hasContentType = NO;
  resultAttachmentPointer.contentType = @"";
  return self;
}
- (BOOL) hasKey {
  return resultAttachmentPointer.hasKey;
}
- (NSData*) key {
  return resultAttachmentPointer.key;
}
- (PushMessageContentAttachmentPointerBuilder*) setKey:(NSData*) value {
  resultAttachmentPointer.hasKey = YES;
  resultAttachmentPointer.key = value;
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clearKey {
  resultAttachmentPointer.hasKey = NO;
  resultAttachmentPointer.key = [NSData data];
  return self;
}
- (BOOL) hasSize {
  return resultAttachmentPointer.hasSize;
}
- (UInt32) size {
  return resultAttachmentPointer.size;
}
- (PushMessageContentAttachmentPointerBuilder*) setSize:(UInt32) value {
  resultAttachmentPointer.hasSize = YES;
  resultAttachmentPointer.size = value;
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clearSize {
  resultAttachmentPointer.hasSize = NO;
  resultAttachmentPointer.size = 0;
  return self;
}
- (BOOL) hasThumbnail {
  return resultAttachmentPointer.hasThumbnail;
}
- (NSData*) thumbnail {
  return resultAttachmentPointer.thumbnail;
}
- (PushMessageContentAttachmentPointerBuilder*) setThumbnail:(NSData*) value {
  resultAttachmentPointer.hasThumbnail = YES;
  resultAttachmentPointer.thumbnail = value;
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clearThumbnail {
  resultAttachmentPointer.hasThumbnail = NO;
  resultAttachmentPointer.thumbnail = [NSData data];
  return self;
}
- (BOOL) hasDigest {
  return resultAttachmentPointer.hasDigest;
}
- (NSData*) digest {
  return resultAttachmentPointer.digest;
}
- (PushMessageContentAttachmentPointerBuilder*) setDigest:(NSData*) value {
  resultAttachmentPointer.hasDigest = YES;
  resultAttachmentPointer.digest = value;
  return self;
}
- (PushMessageContentAttachmentPointerBuilder*) clearDigest {
  resultAttachmentPointer.hasDigest = NO;
  resultAttachmentPointer.digest = [NSData data];
  return self;
}
@end

@interface PushMessageContentGroupContext ()
@property (strong) NSData* id;
@property PushMessageContentGroupContextType type;
@property (strong) NSString* name;
@property (strong) NSMutableArray * membersArray;
@property (strong) PushMessageContentAttachmentPointer* avatar;
@end

@implementation PushMessageContentGroupContext

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
@synthesize membersArray;
@dynamic members;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = [NSData data];
    self.type = PushMessageContentGroupContextTypeUnknown;
    self.name = @"";
    self.avatar = [PushMessageContentAttachmentPointer defaultInstance];
  }
  return self;
}
static PushMessageContentGroupContext* defaultPushMessageContentGroupContextInstance = nil;
+ (void) initialize {
  if (self == [PushMessageContentGroupContext class]) {
    defaultPushMessageContentGroupContextInstance = [[PushMessageContentGroupContext alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPushMessageContentGroupContextInstance;
}
- (instancetype) defaultInstance {
  return defaultPushMessageContentGroupContextInstance;
}
- (NSArray *)members {
  return membersArray;
}
- (NSString*)membersAtIndex:(NSUInteger)index {
  return [membersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeData:1 value:self.id];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  [self.membersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  if (self.hasAvatar) {
    [output writeMessage:5 value:self.avatar];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeDataSize(1, self.id);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.membersArray.count;
    [self.membersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAvatar) {
    size_ += computeMessageSize(5, self.avatar);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PushMessageContentGroupContext*) parseFromData:(NSData*) data {
  return (PushMessageContentGroupContext*)[[[PushMessageContentGroupContext builder] mergeFromData:data] build];
}
+ (PushMessageContentGroupContext*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContentGroupContext*)[[[PushMessageContentGroupContext builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentGroupContext*) parseFromInputStream:(NSInputStream*) input {
  return (PushMessageContentGroupContext*)[[[PushMessageContentGroupContext builder] mergeFromInputStream:input] build];
}
+ (PushMessageContentGroupContext*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContentGroupContext*)[[[PushMessageContentGroupContext builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentGroupContext*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PushMessageContentGroupContext*)[[[PushMessageContentGroupContext builder] mergeFromCodedInputStream:input] build];
}
+ (PushMessageContentGroupContext*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PushMessageContentGroupContext*)[[[PushMessageContentGroupContext builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PushMessageContentGroupContextBuilder*) builder {
  return [[PushMessageContentGroupContextBuilder alloc] init];
}
+ (PushMessageContentGroupContextBuilder*) builderWithPrototype:(PushMessageContentGroupContext*) prototype {
  return [[PushMessageContentGroupContext builder] mergeFrom:prototype];
}
- (PushMessageContentGroupContextBuilder*) builder {
  return [PushMessageContentGroupContext builder];
}
- (PushMessageContentGroupContextBuilder*) toBuilder {
  return [PushMessageContentGroupContext builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromPushMessageContentGroupContextType(self.type)];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  [self.membersArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"members", obj];
  }];
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@ {\n", indent, @"avatar"];
    [self.avatar writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  [dictionary setObject:self.members forKey: @"members"];
  if (self.hasAvatar) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.avatar storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"avatar"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PushMessageContentGroupContext class]]) {
    return NO;
  }
  PushMessageContentGroupContext *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      [self.membersArray isEqualToArray:otherMessage.membersArray] &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  [self.membersArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PushMessageContentGroupContextTypeIsValidValue(PushMessageContentGroupContextType value) {
  switch (value) {
    case PushMessageContentGroupContextTypeUnknown:
    case PushMessageContentGroupContextTypeUpdate:
    case PushMessageContentGroupContextTypeDeliver:
    case PushMessageContentGroupContextTypeQuit:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPushMessageContentGroupContextType(PushMessageContentGroupContextType value) {
  switch (value) {
    case PushMessageContentGroupContextTypeUnknown:
      return @"PushMessageContentGroupContextTypeUnknown";
    case PushMessageContentGroupContextTypeUpdate:
      return @"PushMessageContentGroupContextTypeUpdate";
    case PushMessageContentGroupContextTypeDeliver:
      return @"PushMessageContentGroupContextTypeDeliver";
    case PushMessageContentGroupContextTypeQuit:
      return @"PushMessageContentGroupContextTypeQuit";
    default:
      return nil;
  }
}

@interface PushMessageContentGroupContextBuilder()
@property (strong) PushMessageContentGroupContext* resultGroupContext;
@end

@implementation PushMessageContentGroupContextBuilder
@synthesize resultGroupContext;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGroupContext = [[PushMessageContentGroupContext alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGroupContext;
}
- (PushMessageContentGroupContextBuilder*) clear {
  self.resultGroupContext = [[PushMessageContentGroupContext alloc] init];
  return self;
}
- (PushMessageContentGroupContextBuilder*) clone {
  return [PushMessageContentGroupContext builderWithPrototype:resultGroupContext];
}
- (PushMessageContentGroupContext*) defaultInstance {
  return [PushMessageContentGroupContext defaultInstance];
}
- (PushMessageContentGroupContext*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PushMessageContentGroupContext*) buildPartial {
  PushMessageContentGroupContext* returnMe = resultGroupContext;
  self.resultGroupContext = nil;
  return returnMe;
}
- (PushMessageContentGroupContextBuilder*) mergeFrom:(PushMessageContentGroupContext*) other {
  if (other == [PushMessageContentGroupContext defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.membersArray.count > 0) {
    if (resultGroupContext.membersArray == nil) {
      resultGroupContext.membersArray = [[NSMutableArray alloc] initWithArray:other.membersArray];
    } else {
      [resultGroupContext.membersArray addObjectsFromArray:other.membersArray];
    }
  }
  if (other.hasAvatar) {
    [self mergeAvatar:other.avatar];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PushMessageContentGroupContextBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PushMessageContentGroupContextBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readData]];
        break;
      }
      case 16: {
        PushMessageContentGroupContextType value = (PushMessageContentGroupContextType)[input readEnum];
        if (PushMessageContentGroupContextTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self addMembers:[input readString]];
        break;
      }
      case 42: {
        PushMessageContentAttachmentPointerBuilder* subBuilder = [PushMessageContentAttachmentPointer builder];
        if (self.hasAvatar) {
          [subBuilder mergeFrom:self.avatar];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAvatar:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultGroupContext.hasId;
}
- (NSData*) id {
  return resultGroupContext.id;
}
- (PushMessageContentGroupContextBuilder*) setId:(NSData*) value {
  resultGroupContext.hasId = YES;
  resultGroupContext.id = value;
  return self;
}
- (PushMessageContentGroupContextBuilder*) clearId {
  resultGroupContext.hasId = NO;
  resultGroupContext.id = [NSData data];
  return self;
}
- (BOOL) hasType {
  return resultGroupContext.hasType;
}
- (PushMessageContentGroupContextType) type {
  return resultGroupContext.type;
}
- (PushMessageContentGroupContextBuilder*) setType:(PushMessageContentGroupContextType) value {
  resultGroupContext.hasType = YES;
  resultGroupContext.type = value;
  return self;
}
- (PushMessageContentGroupContextBuilder*) clearType {
  resultGroupContext.hasType = NO;
  resultGroupContext.type = PushMessageContentGroupContextTypeUnknown;
  return self;
}
- (BOOL) hasName {
  return resultGroupContext.hasName;
}
- (NSString*) name {
  return resultGroupContext.name;
}
- (PushMessageContentGroupContextBuilder*) setName:(NSString*) value {
  resultGroupContext.hasName = YES;
  resultGroupContext.name = value;
  return self;
}
- (PushMessageContentGroupContextBuilder*) clearName {
  resultGroupContext.hasName = NO;
  resultGroupContext.name = @"";
  return self;
}
- (NSMutableArray *)members {
  return resultGroupContext.membersArray;
}
- (NSString*)membersAtIndex:(NSUInteger)index {
  return [resultGroupContext membersAtIndex:index];
}
- (PushMessageContentGroupContextBuilder *)addMembers:(NSString*)value {
  if (resultGroupContext.membersArray == nil) {
    resultGroupContext.membersArray = [[NSMutableArray alloc]init];
  }
  [resultGroupContext.membersArray addObject:value];
  return self;
}
- (PushMessageContentGroupContextBuilder *)setMembersArray:(NSArray *)array {
  resultGroupContext.membersArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (PushMessageContentGroupContextBuilder *)clearMembers {
  resultGroupContext.membersArray = nil;
  return self;
}
- (BOOL) hasAvatar {
  return resultGroupContext.hasAvatar;
}
- (PushMessageContentAttachmentPointer*) avatar {
  return resultGroupContext.avatar;
}
- (PushMessageContentGroupContextBuilder*) setAvatar:(PushMessageContentAttachmentPointer*) value {
  resultGroupContext.hasAvatar = YES;
  resultGroupContext.avatar = value;
  return self;
}
- (PushMessageContentGroupContextBuilder*) setAvatarBuilder:(PushMessageContentAttachmentPointerBuilder*) builderForValue {
  return [self setAvatar:[builderForValue build]];
}
- (PushMessageContentGroupContextBuilder*) mergeAvatar:(PushMessageContentAttachmentPointer*) value {
  if (resultGroupContext.hasAvatar &&
      resultGroupContext.avatar != [PushMessageContentAttachmentPointer defaultInstance]) {
    resultGroupContext.avatar =
      [[[PushMessageContentAttachmentPointer builderWithPrototype:resultGroupContext.avatar] mergeFrom:value] buildPartial];
  } else {
    resultGroupContext.avatar = value;
  }
  resultGroupContext.hasAvatar = YES;
  return self;
}
- (PushMessageContentGroupContextBuilder*) clearAvatar {
  resultGroupContext.hasAvatar = NO;
  resultGroupContext.avatar = [PushMessageContentAttachmentPointer defaultInstance];
  return self;
}
@end

@interface PushMessageContentBuilder()
@property (strong) PushMessageContent* resultPushMessageContent;
@end

@implementation PushMessageContentBuilder
@synthesize resultPushMessageContent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPushMessageContent = [[PushMessageContent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPushMessageContent;
}
- (PushMessageContentBuilder*) clear {
  self.resultPushMessageContent = [[PushMessageContent alloc] init];
  return self;
}
- (PushMessageContentBuilder*) clone {
  return [PushMessageContent builderWithPrototype:resultPushMessageContent];
}
- (PushMessageContent*) defaultInstance {
  return [PushMessageContent defaultInstance];
}
- (PushMessageContent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PushMessageContent*) buildPartial {
  PushMessageContent* returnMe = resultPushMessageContent;
  self.resultPushMessageContent = nil;
  return returnMe;
}
- (PushMessageContentBuilder*) mergeFrom:(PushMessageContent*) other {
  if (other == [PushMessageContent defaultInstance]) {
    return self;
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  if (other.attachmentsArray.count > 0) {
    if (resultPushMessageContent.attachmentsArray == nil) {
      resultPushMessageContent.attachmentsArray = [[NSMutableArray alloc] initWithArray:other.attachmentsArray];
    } else {
      [resultPushMessageContent.attachmentsArray addObjectsFromArray:other.attachmentsArray];
    }
  }
  if (other.hasGroup) {
    [self mergeGroup:other.group];
  }
  if (other.hasFlags) {
    [self setFlags:other.flags];
  }
  if (other.hasPa) {
    [self mergePa:other.pa];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PushMessageContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PushMessageContentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBody:[input readString]];
        break;
      }
      case 18: {
        PushMessageContentAttachmentPointerBuilder* subBuilder = [PushMessageContentAttachmentPointer builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttachments:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PushMessageContentGroupContextBuilder* subBuilder = [PushMessageContentGroupContext builder];
        if (self.hasGroup) {
          [subBuilder mergeFrom:self.group];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGroup:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setFlags:[input readUInt32]];
        break;
      }
      case 162: {
        PredefinedAnswersBuilder* subBuilder = [PredefinedAnswers builder];
        if (self.hasPa) {
          [subBuilder mergeFrom:self.pa];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPa:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBody {
  return resultPushMessageContent.hasBody;
}
- (NSString*) body {
  return resultPushMessageContent.body;
}
- (PushMessageContentBuilder*) setBody:(NSString*) value {
  resultPushMessageContent.hasBody = YES;
  resultPushMessageContent.body = value;
  return self;
}
- (PushMessageContentBuilder*) clearBody {
  resultPushMessageContent.hasBody = NO;
  resultPushMessageContent.body = @"";
  return self;
}
- (NSMutableArray<PushMessageContentAttachmentPointer*> *)attachments {
  return resultPushMessageContent.attachmentsArray;
}
- (PushMessageContentAttachmentPointer*)attachmentsAtIndex:(NSUInteger)index {
  return [resultPushMessageContent attachmentsAtIndex:index];
}
- (PushMessageContentBuilder *)addAttachments:(PushMessageContentAttachmentPointer*)value {
  if (resultPushMessageContent.attachmentsArray == nil) {
    resultPushMessageContent.attachmentsArray = [[NSMutableArray alloc]init];
  }
  [resultPushMessageContent.attachmentsArray addObject:value];
  return self;
}
- (PushMessageContentBuilder *)setAttachmentsArray:(NSArray<PushMessageContentAttachmentPointer*> *)array {
  resultPushMessageContent.attachmentsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PushMessageContentBuilder *)clearAttachments {
  resultPushMessageContent.attachmentsArray = nil;
  return self;
}
- (BOOL) hasGroup {
  return resultPushMessageContent.hasGroup;
}
- (PushMessageContentGroupContext*) group {
  return resultPushMessageContent.group;
}
- (PushMessageContentBuilder*) setGroup:(PushMessageContentGroupContext*) value {
  resultPushMessageContent.hasGroup = YES;
  resultPushMessageContent.group = value;
  return self;
}
- (PushMessageContentBuilder*) setGroupBuilder:(PushMessageContentGroupContextBuilder*) builderForValue {
  return [self setGroup:[builderForValue build]];
}
- (PushMessageContentBuilder*) mergeGroup:(PushMessageContentGroupContext*) value {
  if (resultPushMessageContent.hasGroup &&
      resultPushMessageContent.group != [PushMessageContentGroupContext defaultInstance]) {
    resultPushMessageContent.group =
      [[[PushMessageContentGroupContext builderWithPrototype:resultPushMessageContent.group] mergeFrom:value] buildPartial];
  } else {
    resultPushMessageContent.group = value;
  }
  resultPushMessageContent.hasGroup = YES;
  return self;
}
- (PushMessageContentBuilder*) clearGroup {
  resultPushMessageContent.hasGroup = NO;
  resultPushMessageContent.group = [PushMessageContentGroupContext defaultInstance];
  return self;
}
- (BOOL) hasFlags {
  return resultPushMessageContent.hasFlags;
}
- (UInt32) flags {
  return resultPushMessageContent.flags;
}
- (PushMessageContentBuilder*) setFlags:(UInt32) value {
  resultPushMessageContent.hasFlags = YES;
  resultPushMessageContent.flags = value;
  return self;
}
- (PushMessageContentBuilder*) clearFlags {
  resultPushMessageContent.hasFlags = NO;
  resultPushMessageContent.flags = 0;
  return self;
}
- (BOOL) hasPa {
  return resultPushMessageContent.hasPa;
}
- (PredefinedAnswers*) pa {
  return resultPushMessageContent.pa;
}
- (PushMessageContentBuilder*) setPa:(PredefinedAnswers*) value {
  resultPushMessageContent.hasPa = YES;
  resultPushMessageContent.pa = value;
  return self;
}
- (PushMessageContentBuilder*) setPaBuilder:(PredefinedAnswersBuilder*) builderForValue {
  return [self setPa:[builderForValue build]];
}
- (PushMessageContentBuilder*) mergePa:(PredefinedAnswers*) value {
  if (resultPushMessageContent.hasPa &&
      resultPushMessageContent.pa != [PredefinedAnswers defaultInstance]) {
    resultPushMessageContent.pa =
      [[[PredefinedAnswers builderWithPrototype:resultPushMessageContent.pa] mergeFrom:value] buildPartial];
  } else {
    resultPushMessageContent.pa = value;
  }
  resultPushMessageContent.hasPa = YES;
  return self;
}
- (PushMessageContentBuilder*) clearPa {
  resultPushMessageContent.hasPa = NO;
  resultPushMessageContent.pa = [PredefinedAnswers defaultInstance];
  return self;
}
@end

@interface PredefinedAnswers ()
@property UInt32 type;
@property (strong) NSString* data;
@end

@implementation PredefinedAnswers

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = 0;
    self.data = @"";
  }
  return self;
}
static PredefinedAnswers* defaultPredefinedAnswersInstance = nil;
+ (void) initialize {
  if (self == [PredefinedAnswers class]) {
    defaultPredefinedAnswersInstance = [[PredefinedAnswers alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPredefinedAnswersInstance;
}
- (instancetype) defaultInstance {
  return defaultPredefinedAnswersInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeUInt32:1 value:self.type];
  }
  if (self.hasData) {
    [output writeString:2 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeUInt32Size(1, self.type);
  }
  if (self.hasData) {
    size_ += computeStringSize(2, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PredefinedAnswers*) parseFromData:(NSData*) data {
  return (PredefinedAnswers*)[[[PredefinedAnswers builder] mergeFromData:data] build];
}
+ (PredefinedAnswers*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PredefinedAnswers*)[[[PredefinedAnswers builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PredefinedAnswers*) parseFromInputStream:(NSInputStream*) input {
  return (PredefinedAnswers*)[[[PredefinedAnswers builder] mergeFromInputStream:input] build];
}
+ (PredefinedAnswers*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PredefinedAnswers*)[[[PredefinedAnswers builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PredefinedAnswers*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PredefinedAnswers*)[[[PredefinedAnswers builder] mergeFromCodedInputStream:input] build];
}
+ (PredefinedAnswers*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PredefinedAnswers*)[[[PredefinedAnswers builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PredefinedAnswersBuilder*) builder {
  return [[PredefinedAnswersBuilder alloc] init];
}
+ (PredefinedAnswersBuilder*) builderWithPrototype:(PredefinedAnswers*) prototype {
  return [[PredefinedAnswers builder] mergeFrom:prototype];
}
- (PredefinedAnswersBuilder*) builder {
  return [PredefinedAnswers builder];
}
- (PredefinedAnswersBuilder*) toBuilder {
  return [PredefinedAnswers builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.type] forKey: @"type"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PredefinedAnswers class]]) {
    return NO;
  }
  PredefinedAnswers *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.type] hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PredefinedAnswersBuilder()
@property (strong) PredefinedAnswers* resultPredefinedAnswers;
@end

@implementation PredefinedAnswersBuilder
@synthesize resultPredefinedAnswers;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPredefinedAnswers = [[PredefinedAnswers alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPredefinedAnswers;
}
- (PredefinedAnswersBuilder*) clear {
  self.resultPredefinedAnswers = [[PredefinedAnswers alloc] init];
  return self;
}
- (PredefinedAnswersBuilder*) clone {
  return [PredefinedAnswers builderWithPrototype:resultPredefinedAnswers];
}
- (PredefinedAnswers*) defaultInstance {
  return [PredefinedAnswers defaultInstance];
}
- (PredefinedAnswers*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PredefinedAnswers*) buildPartial {
  PredefinedAnswers* returnMe = resultPredefinedAnswers;
  self.resultPredefinedAnswers = nil;
  return returnMe;
}
- (PredefinedAnswersBuilder*) mergeFrom:(PredefinedAnswers*) other {
  if (other == [PredefinedAnswers defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PredefinedAnswersBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PredefinedAnswersBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setType:[input readUInt32]];
        break;
      }
      case 18: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultPredefinedAnswers.hasType;
}
- (UInt32) type {
  return resultPredefinedAnswers.type;
}
- (PredefinedAnswersBuilder*) setType:(UInt32) value {
  resultPredefinedAnswers.hasType = YES;
  resultPredefinedAnswers.type = value;
  return self;
}
- (PredefinedAnswersBuilder*) clearType {
  resultPredefinedAnswers.hasType = NO;
  resultPredefinedAnswers.type = 0;
  return self;
}
- (BOOL) hasData {
  return resultPredefinedAnswers.hasData;
}
- (NSString*) data {
  return resultPredefinedAnswers.data;
}
- (PredefinedAnswersBuilder*) setData:(NSString*) value {
  resultPredefinedAnswers.hasData = YES;
  resultPredefinedAnswers.data = value;
  return self;
}
- (PredefinedAnswersBuilder*) clearData {
  resultPredefinedAnswers.hasData = NO;
  resultPredefinedAnswers.data = @"";
  return self;
}
@end

@interface SyncMessage ()
@property (strong) SyncMessageSent* sent;
@property (strong) SyncMessageContacts* contacts;
@property (strong) SyncMessageGroups* groups;
@property (strong) SyncMessageRequest* request;
@property (strong) NSMutableArray<SyncMessageRead*> * readArray;
@end

@implementation SyncMessage

- (BOOL) hasSent {
  return !!hasSent_;
}
- (void) setHasSent:(BOOL) _value_ {
  hasSent_ = !!_value_;
}
@synthesize sent;
- (BOOL) hasContacts {
  return !!hasContacts_;
}
- (void) setHasContacts:(BOOL) _value_ {
  hasContacts_ = !!_value_;
}
@synthesize contacts;
- (BOOL) hasGroups {
  return !!hasGroups_;
}
- (void) setHasGroups:(BOOL) _value_ {
  hasGroups_ = !!_value_;
}
@synthesize groups;
- (BOOL) hasRequest {
  return !!hasRequest_;
}
- (void) setHasRequest:(BOOL) _value_ {
  hasRequest_ = !!_value_;
}
@synthesize request;
@synthesize readArray;
@dynamic read;
- (instancetype) init {
  if ((self = [super init])) {
    self.sent = [SyncMessageSent defaultInstance];
    self.contacts = [SyncMessageContacts defaultInstance];
    self.groups = [SyncMessageGroups defaultInstance];
    self.request = [SyncMessageRequest defaultInstance];
  }
  return self;
}
static SyncMessage* defaultSyncMessageInstance = nil;
+ (void) initialize {
  if (self == [SyncMessage class]) {
    defaultSyncMessageInstance = [[SyncMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSyncMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultSyncMessageInstance;
}
- (NSArray<SyncMessageRead*> *)read {
  return readArray;
}
- (SyncMessageRead*)readAtIndex:(NSUInteger)index {
  return [readArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSent) {
    [output writeMessage:1 value:self.sent];
  }
  if (self.hasContacts) {
    [output writeMessage:2 value:self.contacts];
  }
  if (self.hasGroups) {
    [output writeMessage:3 value:self.groups];
  }
  if (self.hasRequest) {
    [output writeMessage:4 value:self.request];
  }
  [self.readArray enumerateObjectsUsingBlock:^(SyncMessageRead *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSent) {
    size_ += computeMessageSize(1, self.sent);
  }
  if (self.hasContacts) {
    size_ += computeMessageSize(2, self.contacts);
  }
  if (self.hasGroups) {
    size_ += computeMessageSize(3, self.groups);
  }
  if (self.hasRequest) {
    size_ += computeMessageSize(4, self.request);
  }
  [self.readArray enumerateObjectsUsingBlock:^(SyncMessageRead *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SyncMessage*) parseFromData:(NSData*) data {
  return (SyncMessage*)[[[SyncMessage builder] mergeFromData:data] build];
}
+ (SyncMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessage*)[[[SyncMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncMessage*) parseFromInputStream:(NSInputStream*) input {
  return (SyncMessage*)[[[SyncMessage builder] mergeFromInputStream:input] build];
}
+ (SyncMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessage*)[[[SyncMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncMessage*)[[[SyncMessage builder] mergeFromCodedInputStream:input] build];
}
+ (SyncMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessage*)[[[SyncMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageBuilder*) builder {
  return [[SyncMessageBuilder alloc] init];
}
+ (SyncMessageBuilder*) builderWithPrototype:(SyncMessage*) prototype {
  return [[SyncMessage builder] mergeFrom:prototype];
}
- (SyncMessageBuilder*) builder {
  return [SyncMessage builder];
}
- (SyncMessageBuilder*) toBuilder {
  return [SyncMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSent) {
    [output appendFormat:@"%@%@ {\n", indent, @"sent"];
    [self.sent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasContacts) {
    [output appendFormat:@"%@%@ {\n", indent, @"contacts"];
    [self.contacts writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasGroups) {
    [output appendFormat:@"%@%@ {\n", indent, @"groups"];
    [self.groups writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"request"];
    [self.request writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.readArray enumerateObjectsUsingBlock:^(SyncMessageRead *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"read"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSent) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sent storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sent"];
  }
  if (self.hasContacts) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.contacts storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"contacts"];
  }
  if (self.hasGroups) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.groups storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"groups"];
  }
  if (self.hasRequest) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.request storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"request"];
  }
  for (SyncMessageRead* element in self.readArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"read"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SyncMessage class]]) {
    return NO;
  }
  SyncMessage *otherMessage = other;
  return
      self.hasSent == otherMessage.hasSent &&
      (!self.hasSent || [self.sent isEqual:otherMessage.sent]) &&
      self.hasContacts == otherMessage.hasContacts &&
      (!self.hasContacts || [self.contacts isEqual:otherMessage.contacts]) &&
      self.hasGroups == otherMessage.hasGroups &&
      (!self.hasGroups || [self.groups isEqual:otherMessage.groups]) &&
      self.hasRequest == otherMessage.hasRequest &&
      (!self.hasRequest || [self.request isEqual:otherMessage.request]) &&
      [self.readArray isEqualToArray:otherMessage.readArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSent) {
    hashCode = hashCode * 31 + [self.sent hash];
  }
  if (self.hasContacts) {
    hashCode = hashCode * 31 + [self.contacts hash];
  }
  if (self.hasGroups) {
    hashCode = hashCode * 31 + [self.groups hash];
  }
  if (self.hasRequest) {
    hashCode = hashCode * 31 + [self.request hash];
  }
  [self.readArray enumerateObjectsUsingBlock:^(SyncMessageRead *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SyncMessageSent ()
@property (strong) NSString* destination;
@property UInt64 timestamp;
@property (strong) PushMessageContent* message;
@end

@implementation SyncMessageSent

- (BOOL) hasDestination {
  return !!hasDestination_;
}
- (void) setHasDestination:(BOOL) _value_ {
  hasDestination_ = !!_value_;
}
@synthesize destination;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasMessage {
  return !!hasMessage_;
}
- (void) setHasMessage:(BOOL) _value_ {
  hasMessage_ = !!_value_;
}
@synthesize message;
- (instancetype) init {
  if ((self = [super init])) {
    self.destination = @"";
    self.timestamp = 0L;
    self.message = [PushMessageContent defaultInstance];
  }
  return self;
}
static SyncMessageSent* defaultSyncMessageSentInstance = nil;
+ (void) initialize {
  if (self == [SyncMessageSent class]) {
    defaultSyncMessageSentInstance = [[SyncMessageSent alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSyncMessageSentInstance;
}
- (instancetype) defaultInstance {
  return defaultSyncMessageSentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDestination) {
    [output writeString:1 value:self.destination];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:2 value:self.timestamp];
  }
  if (self.hasMessage) {
    [output writeMessage:3 value:self.message];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDestination) {
    size_ += computeStringSize(1, self.destination);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(2, self.timestamp);
  }
  if (self.hasMessage) {
    size_ += computeMessageSize(3, self.message);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SyncMessageSent*) parseFromData:(NSData*) data {
  return (SyncMessageSent*)[[[SyncMessageSent builder] mergeFromData:data] build];
}
+ (SyncMessageSent*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageSent*)[[[SyncMessageSent builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageSent*) parseFromInputStream:(NSInputStream*) input {
  return (SyncMessageSent*)[[[SyncMessageSent builder] mergeFromInputStream:input] build];
}
+ (SyncMessageSent*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageSent*)[[[SyncMessageSent builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageSent*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncMessageSent*)[[[SyncMessageSent builder] mergeFromCodedInputStream:input] build];
}
+ (SyncMessageSent*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageSent*)[[[SyncMessageSent builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageSentBuilder*) builder {
  return [[SyncMessageSentBuilder alloc] init];
}
+ (SyncMessageSentBuilder*) builderWithPrototype:(SyncMessageSent*) prototype {
  return [[SyncMessageSent builder] mergeFrom:prototype];
}
- (SyncMessageSentBuilder*) builder {
  return [SyncMessageSent builder];
}
- (SyncMessageSentBuilder*) toBuilder {
  return [SyncMessageSent builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDestination) {
    [output appendFormat:@"%@%@: %@\n", indent, @"destination", self.destination];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"message"];
    [self.message writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasDestination) {
    [dictionary setObject: self.destination forKey: @"destination"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.message storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"message"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SyncMessageSent class]]) {
    return NO;
  }
  SyncMessageSent *otherMessage = other;
  return
      self.hasDestination == otherMessage.hasDestination &&
      (!self.hasDestination || [self.destination isEqual:otherMessage.destination]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasMessage == otherMessage.hasMessage &&
      (!self.hasMessage || [self.message isEqual:otherMessage.message]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDestination) {
    hashCode = hashCode * 31 + [self.destination hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasMessage) {
    hashCode = hashCode * 31 + [self.message hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SyncMessageSentBuilder()
@property (strong) SyncMessageSent* resultSent;
@end

@implementation SyncMessageSentBuilder
@synthesize resultSent;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSent = [[SyncMessageSent alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSent;
}
- (SyncMessageSentBuilder*) clear {
  self.resultSent = [[SyncMessageSent alloc] init];
  return self;
}
- (SyncMessageSentBuilder*) clone {
  return [SyncMessageSent builderWithPrototype:resultSent];
}
- (SyncMessageSent*) defaultInstance {
  return [SyncMessageSent defaultInstance];
}
- (SyncMessageSent*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncMessageSent*) buildPartial {
  SyncMessageSent* returnMe = resultSent;
  self.resultSent = nil;
  return returnMe;
}
- (SyncMessageSentBuilder*) mergeFrom:(SyncMessageSent*) other {
  if (other == [SyncMessageSent defaultInstance]) {
    return self;
  }
  if (other.hasDestination) {
    [self setDestination:other.destination];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasMessage) {
    [self mergeMessage:other.message];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncMessageSentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncMessageSentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDestination:[input readString]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
      case 26: {
        PushMessageContentBuilder* subBuilder = [PushMessageContent builder];
        if (self.hasMessage) {
          [subBuilder mergeFrom:self.message];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDestination {
  return resultSent.hasDestination;
}
- (NSString*) destination {
  return resultSent.destination;
}
- (SyncMessageSentBuilder*) setDestination:(NSString*) value {
  resultSent.hasDestination = YES;
  resultSent.destination = value;
  return self;
}
- (SyncMessageSentBuilder*) clearDestination {
  resultSent.hasDestination = NO;
  resultSent.destination = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultSent.hasTimestamp;
}
- (UInt64) timestamp {
  return resultSent.timestamp;
}
- (SyncMessageSentBuilder*) setTimestamp:(UInt64) value {
  resultSent.hasTimestamp = YES;
  resultSent.timestamp = value;
  return self;
}
- (SyncMessageSentBuilder*) clearTimestamp {
  resultSent.hasTimestamp = NO;
  resultSent.timestamp = 0L;
  return self;
}
- (BOOL) hasMessage {
  return resultSent.hasMessage;
}
- (PushMessageContent*) message {
  return resultSent.message;
}
- (SyncMessageSentBuilder*) setMessage:(PushMessageContent*) value {
  resultSent.hasMessage = YES;
  resultSent.message = value;
  return self;
}
- (SyncMessageSentBuilder*) setMessageBuilder:(PushMessageContentBuilder*) builderForValue {
  return [self setMessage:[builderForValue build]];
}
- (SyncMessageSentBuilder*) mergeMessage:(PushMessageContent*) value {
  if (resultSent.hasMessage &&
      resultSent.message != [PushMessageContent defaultInstance]) {
    resultSent.message =
      [[[PushMessageContent builderWithPrototype:resultSent.message] mergeFrom:value] buildPartial];
  } else {
    resultSent.message = value;
  }
  resultSent.hasMessage = YES;
  return self;
}
- (SyncMessageSentBuilder*) clearMessage {
  resultSent.hasMessage = NO;
  resultSent.message = [PushMessageContent defaultInstance];
  return self;
}
@end

@interface SyncMessageContacts ()
@property (strong) PushMessageContentAttachmentPointer* blob;
@end

@implementation SyncMessageContacts

- (BOOL) hasBlob {
  return !!hasBlob_;
}
- (void) setHasBlob:(BOOL) _value_ {
  hasBlob_ = !!_value_;
}
@synthesize blob;
- (instancetype) init {
  if ((self = [super init])) {
    self.blob = [PushMessageContentAttachmentPointer defaultInstance];
  }
  return self;
}
static SyncMessageContacts* defaultSyncMessageContactsInstance = nil;
+ (void) initialize {
  if (self == [SyncMessageContacts class]) {
    defaultSyncMessageContactsInstance = [[SyncMessageContacts alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSyncMessageContactsInstance;
}
- (instancetype) defaultInstance {
  return defaultSyncMessageContactsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBlob) {
    [output writeMessage:1 value:self.blob];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBlob) {
    size_ += computeMessageSize(1, self.blob);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SyncMessageContacts*) parseFromData:(NSData*) data {
  return (SyncMessageContacts*)[[[SyncMessageContacts builder] mergeFromData:data] build];
}
+ (SyncMessageContacts*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageContacts*)[[[SyncMessageContacts builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageContacts*) parseFromInputStream:(NSInputStream*) input {
  return (SyncMessageContacts*)[[[SyncMessageContacts builder] mergeFromInputStream:input] build];
}
+ (SyncMessageContacts*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageContacts*)[[[SyncMessageContacts builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageContacts*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncMessageContacts*)[[[SyncMessageContacts builder] mergeFromCodedInputStream:input] build];
}
+ (SyncMessageContacts*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageContacts*)[[[SyncMessageContacts builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageContactsBuilder*) builder {
  return [[SyncMessageContactsBuilder alloc] init];
}
+ (SyncMessageContactsBuilder*) builderWithPrototype:(SyncMessageContacts*) prototype {
  return [[SyncMessageContacts builder] mergeFrom:prototype];
}
- (SyncMessageContactsBuilder*) builder {
  return [SyncMessageContacts builder];
}
- (SyncMessageContactsBuilder*) toBuilder {
  return [SyncMessageContacts builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBlob) {
    [output appendFormat:@"%@%@ {\n", indent, @"blob"];
    [self.blob writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBlob) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.blob storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"blob"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SyncMessageContacts class]]) {
    return NO;
  }
  SyncMessageContacts *otherMessage = other;
  return
      self.hasBlob == otherMessage.hasBlob &&
      (!self.hasBlob || [self.blob isEqual:otherMessage.blob]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBlob) {
    hashCode = hashCode * 31 + [self.blob hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SyncMessageContactsBuilder()
@property (strong) SyncMessageContacts* resultContacts;
@end

@implementation SyncMessageContactsBuilder
@synthesize resultContacts;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultContacts = [[SyncMessageContacts alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultContacts;
}
- (SyncMessageContactsBuilder*) clear {
  self.resultContacts = [[SyncMessageContacts alloc] init];
  return self;
}
- (SyncMessageContactsBuilder*) clone {
  return [SyncMessageContacts builderWithPrototype:resultContacts];
}
- (SyncMessageContacts*) defaultInstance {
  return [SyncMessageContacts defaultInstance];
}
- (SyncMessageContacts*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncMessageContacts*) buildPartial {
  SyncMessageContacts* returnMe = resultContacts;
  self.resultContacts = nil;
  return returnMe;
}
- (SyncMessageContactsBuilder*) mergeFrom:(SyncMessageContacts*) other {
  if (other == [SyncMessageContacts defaultInstance]) {
    return self;
  }
  if (other.hasBlob) {
    [self mergeBlob:other.blob];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncMessageContactsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncMessageContactsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PushMessageContentAttachmentPointerBuilder* subBuilder = [PushMessageContentAttachmentPointer builder];
        if (self.hasBlob) {
          [subBuilder mergeFrom:self.blob];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBlob:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBlob {
  return resultContacts.hasBlob;
}
- (PushMessageContentAttachmentPointer*) blob {
  return resultContacts.blob;
}
- (SyncMessageContactsBuilder*) setBlob:(PushMessageContentAttachmentPointer*) value {
  resultContacts.hasBlob = YES;
  resultContacts.blob = value;
  return self;
}
- (SyncMessageContactsBuilder*) setBlobBuilder:(PushMessageContentAttachmentPointerBuilder*) builderForValue {
  return [self setBlob:[builderForValue build]];
}
- (SyncMessageContactsBuilder*) mergeBlob:(PushMessageContentAttachmentPointer*) value {
  if (resultContacts.hasBlob &&
      resultContacts.blob != [PushMessageContentAttachmentPointer defaultInstance]) {
    resultContacts.blob =
      [[[PushMessageContentAttachmentPointer builderWithPrototype:resultContacts.blob] mergeFrom:value] buildPartial];
  } else {
    resultContacts.blob = value;
  }
  resultContacts.hasBlob = YES;
  return self;
}
- (SyncMessageContactsBuilder*) clearBlob {
  resultContacts.hasBlob = NO;
  resultContacts.blob = [PushMessageContentAttachmentPointer defaultInstance];
  return self;
}
@end

@interface SyncMessageGroups ()
@property (strong) PushMessageContentAttachmentPointer* blob;
@end

@implementation SyncMessageGroups

- (BOOL) hasBlob {
  return !!hasBlob_;
}
- (void) setHasBlob:(BOOL) _value_ {
  hasBlob_ = !!_value_;
}
@synthesize blob;
- (instancetype) init {
  if ((self = [super init])) {
    self.blob = [PushMessageContentAttachmentPointer defaultInstance];
  }
  return self;
}
static SyncMessageGroups* defaultSyncMessageGroupsInstance = nil;
+ (void) initialize {
  if (self == [SyncMessageGroups class]) {
    defaultSyncMessageGroupsInstance = [[SyncMessageGroups alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSyncMessageGroupsInstance;
}
- (instancetype) defaultInstance {
  return defaultSyncMessageGroupsInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBlob) {
    [output writeMessage:1 value:self.blob];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasBlob) {
    size_ += computeMessageSize(1, self.blob);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SyncMessageGroups*) parseFromData:(NSData*) data {
  return (SyncMessageGroups*)[[[SyncMessageGroups builder] mergeFromData:data] build];
}
+ (SyncMessageGroups*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageGroups*)[[[SyncMessageGroups builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageGroups*) parseFromInputStream:(NSInputStream*) input {
  return (SyncMessageGroups*)[[[SyncMessageGroups builder] mergeFromInputStream:input] build];
}
+ (SyncMessageGroups*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageGroups*)[[[SyncMessageGroups builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageGroups*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncMessageGroups*)[[[SyncMessageGroups builder] mergeFromCodedInputStream:input] build];
}
+ (SyncMessageGroups*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageGroups*)[[[SyncMessageGroups builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageGroupsBuilder*) builder {
  return [[SyncMessageGroupsBuilder alloc] init];
}
+ (SyncMessageGroupsBuilder*) builderWithPrototype:(SyncMessageGroups*) prototype {
  return [[SyncMessageGroups builder] mergeFrom:prototype];
}
- (SyncMessageGroupsBuilder*) builder {
  return [SyncMessageGroups builder];
}
- (SyncMessageGroupsBuilder*) toBuilder {
  return [SyncMessageGroups builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasBlob) {
    [output appendFormat:@"%@%@ {\n", indent, @"blob"];
    [self.blob writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasBlob) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.blob storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"blob"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SyncMessageGroups class]]) {
    return NO;
  }
  SyncMessageGroups *otherMessage = other;
  return
      self.hasBlob == otherMessage.hasBlob &&
      (!self.hasBlob || [self.blob isEqual:otherMessage.blob]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasBlob) {
    hashCode = hashCode * 31 + [self.blob hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SyncMessageGroupsBuilder()
@property (strong) SyncMessageGroups* resultGroups;
@end

@implementation SyncMessageGroupsBuilder
@synthesize resultGroups;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGroups = [[SyncMessageGroups alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGroups;
}
- (SyncMessageGroupsBuilder*) clear {
  self.resultGroups = [[SyncMessageGroups alloc] init];
  return self;
}
- (SyncMessageGroupsBuilder*) clone {
  return [SyncMessageGroups builderWithPrototype:resultGroups];
}
- (SyncMessageGroups*) defaultInstance {
  return [SyncMessageGroups defaultInstance];
}
- (SyncMessageGroups*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncMessageGroups*) buildPartial {
  SyncMessageGroups* returnMe = resultGroups;
  self.resultGroups = nil;
  return returnMe;
}
- (SyncMessageGroupsBuilder*) mergeFrom:(SyncMessageGroups*) other {
  if (other == [SyncMessageGroups defaultInstance]) {
    return self;
  }
  if (other.hasBlob) {
    [self mergeBlob:other.blob];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncMessageGroupsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncMessageGroupsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PushMessageContentAttachmentPointerBuilder* subBuilder = [PushMessageContentAttachmentPointer builder];
        if (self.hasBlob) {
          [subBuilder mergeFrom:self.blob];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBlob:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBlob {
  return resultGroups.hasBlob;
}
- (PushMessageContentAttachmentPointer*) blob {
  return resultGroups.blob;
}
- (SyncMessageGroupsBuilder*) setBlob:(PushMessageContentAttachmentPointer*) value {
  resultGroups.hasBlob = YES;
  resultGroups.blob = value;
  return self;
}
- (SyncMessageGroupsBuilder*) setBlobBuilder:(PushMessageContentAttachmentPointerBuilder*) builderForValue {
  return [self setBlob:[builderForValue build]];
}
- (SyncMessageGroupsBuilder*) mergeBlob:(PushMessageContentAttachmentPointer*) value {
  if (resultGroups.hasBlob &&
      resultGroups.blob != [PushMessageContentAttachmentPointer defaultInstance]) {
    resultGroups.blob =
      [[[PushMessageContentAttachmentPointer builderWithPrototype:resultGroups.blob] mergeFrom:value] buildPartial];
  } else {
    resultGroups.blob = value;
  }
  resultGroups.hasBlob = YES;
  return self;
}
- (SyncMessageGroupsBuilder*) clearBlob {
  resultGroups.hasBlob = NO;
  resultGroups.blob = [PushMessageContentAttachmentPointer defaultInstance];
  return self;
}
@end

@interface SyncMessageRequest ()
@property SyncMessageRequestType type;
@end

@implementation SyncMessageRequest

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = SyncMessageRequestTypeUnknown;
  }
  return self;
}
static SyncMessageRequest* defaultSyncMessageRequestInstance = nil;
+ (void) initialize {
  if (self == [SyncMessageRequest class]) {
    defaultSyncMessageRequestInstance = [[SyncMessageRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSyncMessageRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultSyncMessageRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SyncMessageRequest*) parseFromData:(NSData*) data {
  return (SyncMessageRequest*)[[[SyncMessageRequest builder] mergeFromData:data] build];
}
+ (SyncMessageRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageRequest*)[[[SyncMessageRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageRequest*) parseFromInputStream:(NSInputStream*) input {
  return (SyncMessageRequest*)[[[SyncMessageRequest builder] mergeFromInputStream:input] build];
}
+ (SyncMessageRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageRequest*)[[[SyncMessageRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncMessageRequest*)[[[SyncMessageRequest builder] mergeFromCodedInputStream:input] build];
}
+ (SyncMessageRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageRequest*)[[[SyncMessageRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageRequestBuilder*) builder {
  return [[SyncMessageRequestBuilder alloc] init];
}
+ (SyncMessageRequestBuilder*) builderWithPrototype:(SyncMessageRequest*) prototype {
  return [[SyncMessageRequest builder] mergeFrom:prototype];
}
- (SyncMessageRequestBuilder*) builder {
  return [SyncMessageRequest builder];
}
- (SyncMessageRequestBuilder*) toBuilder {
  return [SyncMessageRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromSyncMessageRequestType(self.type)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SyncMessageRequest class]]) {
    return NO;
  }
  SyncMessageRequest *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL SyncMessageRequestTypeIsValidValue(SyncMessageRequestType value) {
  switch (value) {
    case SyncMessageRequestTypeUnknown:
    case SyncMessageRequestTypeContacts:
    case SyncMessageRequestTypeGroups:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromSyncMessageRequestType(SyncMessageRequestType value) {
  switch (value) {
    case SyncMessageRequestTypeUnknown:
      return @"SyncMessageRequestTypeUnknown";
    case SyncMessageRequestTypeContacts:
      return @"SyncMessageRequestTypeContacts";
    case SyncMessageRequestTypeGroups:
      return @"SyncMessageRequestTypeGroups";
    default:
      return nil;
  }
}

@interface SyncMessageRequestBuilder()
@property (strong) SyncMessageRequest* resultRequest;
@end

@implementation SyncMessageRequestBuilder
@synthesize resultRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRequest = [[SyncMessageRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRequest;
}
- (SyncMessageRequestBuilder*) clear {
  self.resultRequest = [[SyncMessageRequest alloc] init];
  return self;
}
- (SyncMessageRequestBuilder*) clone {
  return [SyncMessageRequest builderWithPrototype:resultRequest];
}
- (SyncMessageRequest*) defaultInstance {
  return [SyncMessageRequest defaultInstance];
}
- (SyncMessageRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncMessageRequest*) buildPartial {
  SyncMessageRequest* returnMe = resultRequest;
  self.resultRequest = nil;
  return returnMe;
}
- (SyncMessageRequestBuilder*) mergeFrom:(SyncMessageRequest*) other {
  if (other == [SyncMessageRequest defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncMessageRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncMessageRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        SyncMessageRequestType value = (SyncMessageRequestType)[input readEnum];
        if (SyncMessageRequestTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultRequest.hasType;
}
- (SyncMessageRequestType) type {
  return resultRequest.type;
}
- (SyncMessageRequestBuilder*) setType:(SyncMessageRequestType) value {
  resultRequest.hasType = YES;
  resultRequest.type = value;
  return self;
}
- (SyncMessageRequestBuilder*) clearType {
  resultRequest.hasType = NO;
  resultRequest.type = SyncMessageRequestTypeUnknown;
  return self;
}
@end

@interface SyncMessageRead ()
@property (strong) NSString* sender;
@property UInt64 timestamp;
@end

@implementation SyncMessageRead

- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) _value_ {
  hasSender_ = !!_value_;
}
@synthesize sender;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.sender = @"";
    self.timestamp = 0L;
  }
  return self;
}
static SyncMessageRead* defaultSyncMessageReadInstance = nil;
+ (void) initialize {
  if (self == [SyncMessageRead class]) {
    defaultSyncMessageReadInstance = [[SyncMessageRead alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSyncMessageReadInstance;
}
- (instancetype) defaultInstance {
  return defaultSyncMessageReadInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSender) {
    [output writeString:1 value:self.sender];
  }
  if (self.hasTimestamp) {
    [output writeUInt64:2 value:self.timestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSender) {
    size_ += computeStringSize(1, self.sender);
  }
  if (self.hasTimestamp) {
    size_ += computeUInt64Size(2, self.timestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SyncMessageRead*) parseFromData:(NSData*) data {
  return (SyncMessageRead*)[[[SyncMessageRead builder] mergeFromData:data] build];
}
+ (SyncMessageRead*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageRead*)[[[SyncMessageRead builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageRead*) parseFromInputStream:(NSInputStream*) input {
  return (SyncMessageRead*)[[[SyncMessageRead builder] mergeFromInputStream:input] build];
}
+ (SyncMessageRead*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageRead*)[[[SyncMessageRead builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageRead*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SyncMessageRead*)[[[SyncMessageRead builder] mergeFromCodedInputStream:input] build];
}
+ (SyncMessageRead*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SyncMessageRead*)[[[SyncMessageRead builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SyncMessageReadBuilder*) builder {
  return [[SyncMessageReadBuilder alloc] init];
}
+ (SyncMessageReadBuilder*) builderWithPrototype:(SyncMessageRead*) prototype {
  return [[SyncMessageRead builder] mergeFrom:prototype];
}
- (SyncMessageReadBuilder*) builder {
  return [SyncMessageRead builder];
}
- (SyncMessageReadBuilder*) toBuilder {
  return [SyncMessageRead builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sender", self.sender];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSender) {
    [dictionary setObject: self.sender forKey: @"sender"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SyncMessageRead class]]) {
    return NO;
  }
  SyncMessageRead *otherMessage = other;
  return
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SyncMessageReadBuilder()
@property (strong) SyncMessageRead* resultRead;
@end

@implementation SyncMessageReadBuilder
@synthesize resultRead;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRead = [[SyncMessageRead alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRead;
}
- (SyncMessageReadBuilder*) clear {
  self.resultRead = [[SyncMessageRead alloc] init];
  return self;
}
- (SyncMessageReadBuilder*) clone {
  return [SyncMessageRead builderWithPrototype:resultRead];
}
- (SyncMessageRead*) defaultInstance {
  return [SyncMessageRead defaultInstance];
}
- (SyncMessageRead*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncMessageRead*) buildPartial {
  SyncMessageRead* returnMe = resultRead;
  self.resultRead = nil;
  return returnMe;
}
- (SyncMessageReadBuilder*) mergeFrom:(SyncMessageRead*) other {
  if (other == [SyncMessageRead defaultInstance]) {
    return self;
  }
  if (other.hasSender) {
    [self setSender:other.sender];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncMessageReadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncMessageReadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSender:[input readString]];
        break;
      }
      case 16: {
        [self setTimestamp:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSender {
  return resultRead.hasSender;
}
- (NSString*) sender {
  return resultRead.sender;
}
- (SyncMessageReadBuilder*) setSender:(NSString*) value {
  resultRead.hasSender = YES;
  resultRead.sender = value;
  return self;
}
- (SyncMessageReadBuilder*) clearSender {
  resultRead.hasSender = NO;
  resultRead.sender = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultRead.hasTimestamp;
}
- (UInt64) timestamp {
  return resultRead.timestamp;
}
- (SyncMessageReadBuilder*) setTimestamp:(UInt64) value {
  resultRead.hasTimestamp = YES;
  resultRead.timestamp = value;
  return self;
}
- (SyncMessageReadBuilder*) clearTimestamp {
  resultRead.hasTimestamp = NO;
  resultRead.timestamp = 0L;
  return self;
}
@end

@interface SyncMessageBuilder()
@property (strong) SyncMessage* resultSyncMessage;
@end

@implementation SyncMessageBuilder
@synthesize resultSyncMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSyncMessage = [[SyncMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSyncMessage;
}
- (SyncMessageBuilder*) clear {
  self.resultSyncMessage = [[SyncMessage alloc] init];
  return self;
}
- (SyncMessageBuilder*) clone {
  return [SyncMessage builderWithPrototype:resultSyncMessage];
}
- (SyncMessage*) defaultInstance {
  return [SyncMessage defaultInstance];
}
- (SyncMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SyncMessage*) buildPartial {
  SyncMessage* returnMe = resultSyncMessage;
  self.resultSyncMessage = nil;
  return returnMe;
}
- (SyncMessageBuilder*) mergeFrom:(SyncMessage*) other {
  if (other == [SyncMessage defaultInstance]) {
    return self;
  }
  if (other.hasSent) {
    [self mergeSent:other.sent];
  }
  if (other.hasContacts) {
    [self mergeContacts:other.contacts];
  }
  if (other.hasGroups) {
    [self mergeGroups:other.groups];
  }
  if (other.hasRequest) {
    [self mergeRequest:other.request];
  }
  if (other.readArray.count > 0) {
    if (resultSyncMessage.readArray == nil) {
      resultSyncMessage.readArray = [[NSMutableArray alloc] initWithArray:other.readArray];
    } else {
      [resultSyncMessage.readArray addObjectsFromArray:other.readArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SyncMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SyncMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        SyncMessageSentBuilder* subBuilder = [SyncMessageSent builder];
        if (self.hasSent) {
          [subBuilder mergeFrom:self.sent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSent:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        SyncMessageContactsBuilder* subBuilder = [SyncMessageContacts builder];
        if (self.hasContacts) {
          [subBuilder mergeFrom:self.contacts];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setContacts:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        SyncMessageGroupsBuilder* subBuilder = [SyncMessageGroups builder];
        if (self.hasGroups) {
          [subBuilder mergeFrom:self.groups];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setGroups:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        SyncMessageRequestBuilder* subBuilder = [SyncMessageRequest builder];
        if (self.hasRequest) {
          [subBuilder mergeFrom:self.request];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRequest:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        SyncMessageReadBuilder* subBuilder = [SyncMessageRead builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRead:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSent {
  return resultSyncMessage.hasSent;
}
- (SyncMessageSent*) sent {
  return resultSyncMessage.sent;
}
- (SyncMessageBuilder*) setSent:(SyncMessageSent*) value {
  resultSyncMessage.hasSent = YES;
  resultSyncMessage.sent = value;
  return self;
}
- (SyncMessageBuilder*) setSentBuilder:(SyncMessageSentBuilder*) builderForValue {
  return [self setSent:[builderForValue build]];
}
- (SyncMessageBuilder*) mergeSent:(SyncMessageSent*) value {
  if (resultSyncMessage.hasSent &&
      resultSyncMessage.sent != [SyncMessageSent defaultInstance]) {
    resultSyncMessage.sent =
      [[[SyncMessageSent builderWithPrototype:resultSyncMessage.sent] mergeFrom:value] buildPartial];
  } else {
    resultSyncMessage.sent = value;
  }
  resultSyncMessage.hasSent = YES;
  return self;
}
- (SyncMessageBuilder*) clearSent {
  resultSyncMessage.hasSent = NO;
  resultSyncMessage.sent = [SyncMessageSent defaultInstance];
  return self;
}
- (BOOL) hasContacts {
  return resultSyncMessage.hasContacts;
}
- (SyncMessageContacts*) contacts {
  return resultSyncMessage.contacts;
}
- (SyncMessageBuilder*) setContacts:(SyncMessageContacts*) value {
  resultSyncMessage.hasContacts = YES;
  resultSyncMessage.contacts = value;
  return self;
}
- (SyncMessageBuilder*) setContactsBuilder:(SyncMessageContactsBuilder*) builderForValue {
  return [self setContacts:[builderForValue build]];
}
- (SyncMessageBuilder*) mergeContacts:(SyncMessageContacts*) value {
  if (resultSyncMessage.hasContacts &&
      resultSyncMessage.contacts != [SyncMessageContacts defaultInstance]) {
    resultSyncMessage.contacts =
      [[[SyncMessageContacts builderWithPrototype:resultSyncMessage.contacts] mergeFrom:value] buildPartial];
  } else {
    resultSyncMessage.contacts = value;
  }
  resultSyncMessage.hasContacts = YES;
  return self;
}
- (SyncMessageBuilder*) clearContacts {
  resultSyncMessage.hasContacts = NO;
  resultSyncMessage.contacts = [SyncMessageContacts defaultInstance];
  return self;
}
- (BOOL) hasGroups {
  return resultSyncMessage.hasGroups;
}
- (SyncMessageGroups*) groups {
  return resultSyncMessage.groups;
}
- (SyncMessageBuilder*) setGroups:(SyncMessageGroups*) value {
  resultSyncMessage.hasGroups = YES;
  resultSyncMessage.groups = value;
  return self;
}
- (SyncMessageBuilder*) setGroupsBuilder:(SyncMessageGroupsBuilder*) builderForValue {
  return [self setGroups:[builderForValue build]];
}
- (SyncMessageBuilder*) mergeGroups:(SyncMessageGroups*) value {
  if (resultSyncMessage.hasGroups &&
      resultSyncMessage.groups != [SyncMessageGroups defaultInstance]) {
    resultSyncMessage.groups =
      [[[SyncMessageGroups builderWithPrototype:resultSyncMessage.groups] mergeFrom:value] buildPartial];
  } else {
    resultSyncMessage.groups = value;
  }
  resultSyncMessage.hasGroups = YES;
  return self;
}
- (SyncMessageBuilder*) clearGroups {
  resultSyncMessage.hasGroups = NO;
  resultSyncMessage.groups = [SyncMessageGroups defaultInstance];
  return self;
}
- (BOOL) hasRequest {
  return resultSyncMessage.hasRequest;
}
- (SyncMessageRequest*) request {
  return resultSyncMessage.request;
}
- (SyncMessageBuilder*) setRequest:(SyncMessageRequest*) value {
  resultSyncMessage.hasRequest = YES;
  resultSyncMessage.request = value;
  return self;
}
- (SyncMessageBuilder*) setRequestBuilder:(SyncMessageRequestBuilder*) builderForValue {
  return [self setRequest:[builderForValue build]];
}
- (SyncMessageBuilder*) mergeRequest:(SyncMessageRequest*) value {
  if (resultSyncMessage.hasRequest &&
      resultSyncMessage.request != [SyncMessageRequest defaultInstance]) {
    resultSyncMessage.request =
      [[[SyncMessageRequest builderWithPrototype:resultSyncMessage.request] mergeFrom:value] buildPartial];
  } else {
    resultSyncMessage.request = value;
  }
  resultSyncMessage.hasRequest = YES;
  return self;
}
- (SyncMessageBuilder*) clearRequest {
  resultSyncMessage.hasRequest = NO;
  resultSyncMessage.request = [SyncMessageRequest defaultInstance];
  return self;
}
- (NSMutableArray<SyncMessageRead*> *)read {
  return resultSyncMessage.readArray;
}
- (SyncMessageRead*)readAtIndex:(NSUInteger)index {
  return [resultSyncMessage readAtIndex:index];
}
- (SyncMessageBuilder *)addRead:(SyncMessageRead*)value {
  if (resultSyncMessage.readArray == nil) {
    resultSyncMessage.readArray = [[NSMutableArray alloc]init];
  }
  [resultSyncMessage.readArray addObject:value];
  return self;
}
- (SyncMessageBuilder *)setReadArray:(NSArray<SyncMessageRead*> *)array {
  resultSyncMessage.readArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (SyncMessageBuilder *)clearRead {
  resultSyncMessage.readArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
